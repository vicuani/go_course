// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: api.proto

package grpcapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaxiService_EvaluateCargoState_FullMethodName    = "/taxi.TaxiService/EvaluateCargoState"
	TaxiService_EvaluateDriverService_FullMethodName = "/taxi.TaxiService/EvaluateDriverService"
	TaxiService_EvaluateDeliverySpeed_FullMethodName = "/taxi.TaxiService/EvaluateDeliverySpeed"
	TaxiService_DriverReviewsHistory_FullMethodName  = "/taxi.TaxiService/DriverReviewsHistory"
)

// TaxiServiceClient is the client API for TaxiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaxiServiceClient interface {
	EvaluateCargoState(ctx context.Context, in *EvaluateCargoStateRequest, opts ...grpc.CallOption) (*EvaluateCargoStateResponse, error)
	EvaluateDriverService(ctx context.Context, in *EvaluateDriverServiceRequest, opts ...grpc.CallOption) (*EvaluateDriverServiceResponse, error)
	EvaluateDeliverySpeed(ctx context.Context, in *EvaluateDeliverySpeedRequest, opts ...grpc.CallOption) (*EvaluateDeliverySpeedResponse, error)
	DriverReviewsHistory(ctx context.Context, in *DriverReviewsHistoryRequest, opts ...grpc.CallOption) (*DriverReviewsHistoryResponse, error)
}

type taxiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaxiServiceClient(cc grpc.ClientConnInterface) TaxiServiceClient {
	return &taxiServiceClient{cc}
}

func (c *taxiServiceClient) EvaluateCargoState(ctx context.Context, in *EvaluateCargoStateRequest, opts ...grpc.CallOption) (*EvaluateCargoStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EvaluateCargoStateResponse)
	err := c.cc.Invoke(ctx, TaxiService_EvaluateCargoState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxiServiceClient) EvaluateDriverService(ctx context.Context, in *EvaluateDriverServiceRequest, opts ...grpc.CallOption) (*EvaluateDriverServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EvaluateDriverServiceResponse)
	err := c.cc.Invoke(ctx, TaxiService_EvaluateDriverService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxiServiceClient) EvaluateDeliverySpeed(ctx context.Context, in *EvaluateDeliverySpeedRequest, opts ...grpc.CallOption) (*EvaluateDeliverySpeedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EvaluateDeliverySpeedResponse)
	err := c.cc.Invoke(ctx, TaxiService_EvaluateDeliverySpeed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxiServiceClient) DriverReviewsHistory(ctx context.Context, in *DriverReviewsHistoryRequest, opts ...grpc.CallOption) (*DriverReviewsHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DriverReviewsHistoryResponse)
	err := c.cc.Invoke(ctx, TaxiService_DriverReviewsHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaxiServiceServer is the server API for TaxiService service.
// All implementations must embed UnimplementedTaxiServiceServer
// for forward compatibility.
type TaxiServiceServer interface {
	EvaluateCargoState(context.Context, *EvaluateCargoStateRequest) (*EvaluateCargoStateResponse, error)
	EvaluateDriverService(context.Context, *EvaluateDriverServiceRequest) (*EvaluateDriverServiceResponse, error)
	EvaluateDeliverySpeed(context.Context, *EvaluateDeliverySpeedRequest) (*EvaluateDeliverySpeedResponse, error)
	DriverReviewsHistory(context.Context, *DriverReviewsHistoryRequest) (*DriverReviewsHistoryResponse, error)
	mustEmbedUnimplementedTaxiServiceServer()
}

// UnimplementedTaxiServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaxiServiceServer struct{}

func (UnimplementedTaxiServiceServer) EvaluateCargoState(context.Context, *EvaluateCargoStateRequest) (*EvaluateCargoStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluateCargoState not implemented")
}
func (UnimplementedTaxiServiceServer) EvaluateDriverService(context.Context, *EvaluateDriverServiceRequest) (*EvaluateDriverServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluateDriverService not implemented")
}
func (UnimplementedTaxiServiceServer) EvaluateDeliverySpeed(context.Context, *EvaluateDeliverySpeedRequest) (*EvaluateDeliverySpeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluateDeliverySpeed not implemented")
}
func (UnimplementedTaxiServiceServer) DriverReviewsHistory(context.Context, *DriverReviewsHistoryRequest) (*DriverReviewsHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriverReviewsHistory not implemented")
}
func (UnimplementedTaxiServiceServer) mustEmbedUnimplementedTaxiServiceServer() {}
func (UnimplementedTaxiServiceServer) testEmbeddedByValue()                     {}

// UnsafeTaxiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaxiServiceServer will
// result in compilation errors.
type UnsafeTaxiServiceServer interface {
	mustEmbedUnimplementedTaxiServiceServer()
}

func RegisterTaxiServiceServer(s grpc.ServiceRegistrar, srv TaxiServiceServer) {
	// If the following call pancis, it indicates UnimplementedTaxiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaxiService_ServiceDesc, srv)
}

func _TaxiService_EvaluateCargoState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateCargoStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxiServiceServer).EvaluateCargoState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaxiService_EvaluateCargoState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxiServiceServer).EvaluateCargoState(ctx, req.(*EvaluateCargoStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxiService_EvaluateDriverService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateDriverServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxiServiceServer).EvaluateDriverService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaxiService_EvaluateDriverService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxiServiceServer).EvaluateDriverService(ctx, req.(*EvaluateDriverServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxiService_EvaluateDeliverySpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateDeliverySpeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxiServiceServer).EvaluateDeliverySpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaxiService_EvaluateDeliverySpeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxiServiceServer).EvaluateDeliverySpeed(ctx, req.(*EvaluateDeliverySpeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxiService_DriverReviewsHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverReviewsHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxiServiceServer).DriverReviewsHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaxiService_DriverReviewsHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxiServiceServer).DriverReviewsHistory(ctx, req.(*DriverReviewsHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaxiService_ServiceDesc is the grpc.ServiceDesc for TaxiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaxiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taxi.TaxiService",
	HandlerType: (*TaxiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EvaluateCargoState",
			Handler:    _TaxiService_EvaluateCargoState_Handler,
		},
		{
			MethodName: "EvaluateDriverService",
			Handler:    _TaxiService_EvaluateDriverService_Handler,
		},
		{
			MethodName: "EvaluateDeliverySpeed",
			Handler:    _TaxiService_EvaluateDeliverySpeed_Handler,
		},
		{
			MethodName: "DriverReviewsHistory",
			Handler:    _TaxiService_DriverReviewsHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
